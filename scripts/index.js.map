{"version":3,"names":[],"mappings":"","sources":["scripts/index.js"],"sourcesContent":["// This file was generated by modules-webmake (modules for web) project.\n// See: https://github.com/medikoo/modules-webmake\n\n(function (modules) {\n\t'use strict';\n\n\tvar resolve, getRequire, wmRequire, notFoundError, findFile\n\t  , extensions = {\".js\":[\".coffee\",\".jsx\",\".es6\",\".es\"],\".json\":[],\".css\":[],\".html\":[]}\n\t  , envRequire = typeof require === 'function' ? require : null;\n\n\tnotFoundError = function (path) {\n\t\tvar error = new Error(\"Could not find module '\" + path + \"'\");\n\t\terror.code = 'MODULE_NOT_FOUND';\n\t\treturn error;\n\t};\n\tfindFile = function (scope, name, extName) {\n\t\tvar i, ext;\n\t\tif (typeof scope[name + extName] === 'function') return name + extName;\n\t\tfor (i = 0; (ext = extensions[extName][i]); ++i) {\n\t\t\tif (typeof scope[name + ext] === 'function') return name + ext;\n\t\t}\n\t\treturn null;\n\t};\n\tresolve = function (scope, tree, path, fullPath, state, id) {\n\t\tvar name, dir, exports, module, fn, found, i, ext;\n\t\tpath = path.split('/');\n\t\tname = path.pop();\n\t\tif ((name === '.') || (name === '..')) {\n\t\t\tpath.push(name);\n\t\t\tname = '';\n\t\t}\n\t\twhile ((dir = path.shift()) != null) {\n\t\t\tif (!dir || (dir === '.')) continue;\n\t\t\tif (dir === '..') {\n\t\t\t\tscope = tree.pop();\n\t\t\t\tid = id.slice(0, id.lastIndexOf('/'));\n\t\t\t} else {\n\t\t\t\ttree.push(scope);\n\t\t\t\tscope = scope[dir];\n\t\t\t\tid += '/' + dir;\n\t\t\t}\n\t\t\tif (!scope) throw notFoundError(fullPath);\n\t\t}\n\t\tif (name && (typeof scope[name] !== 'function')) {\n\t\t\tfound = findFile(scope, name, '.js');\n\t\t\tif (!found) found = findFile(scope, name, '.json');\n\t\t\tif (!found) found = findFile(scope, name, '.css');\n\t\t\tif (!found) found = findFile(scope, name, '.html');\n\t\t\tif (found) {\n\t\t\t\tname = found;\n\t\t\t} else if ((state !== 2) && (typeof scope[name] === 'object')) {\n\t\t\t\ttree.push(scope);\n\t\t\t\tscope = scope[name];\n\t\t\t\tid += '/' + name;\n\t\t\t\tname = '';\n\t\t\t}\n\t\t}\n\t\tif (!name) {\n\t\t\tif ((state !== 1) && scope[':mainpath:']) {\n\t\t\t\treturn resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);\n\t\t\t}\n\t\t\treturn resolve(scope, tree, 'index', fullPath, 2, id);\n\t\t}\n\t\tfn = scope[name];\n\t\tif (!fn) throw notFoundError(fullPath);\n\t\tif (fn.hasOwnProperty('module')) return fn.module.exports;\n\t\texports = {};\n\t\tfn.module = module = { exports: exports, id: id + '/' + name };\n\t\tfn.call(exports, exports, module, getRequire(scope, tree, id));\n\t\treturn module.exports;\n\t};\n\twmRequire = function (scope, tree, fullPath, id) {\n\t\tvar name, path = fullPath, t = fullPath.charAt(0), state = 0;\n\t\tif (t === '/') {\n\t\t\tpath = path.slice(1);\n\t\t\tscope = modules['/'];\n\t\t\tif (!scope) {\n\t\t\t\tif (envRequire) return envRequire(fullPath);\n\t\t\t\tthrow notFoundError(fullPath);\n\t\t\t}\n\t\t\tid = '/';\n\t\t\ttree = [];\n\t\t} else if (t !== '.') {\n\t\t\tname = path.split('/', 1)[0];\n\t\t\tscope = modules[name];\n\t\t\tif (!scope) {\n\t\t\t\tif (envRequire) return envRequire(fullPath);\n\t\t\t\tthrow notFoundError(fullPath);\n\t\t\t}\n\t\t\tid = name;\n\t\t\ttree = [];\n\t\t\tpath = path.slice(name.length + 1);\n\t\t\tif (!path) {\n\t\t\t\tpath = scope[':mainpath:'];\n\t\t\t\tif (path) {\n\t\t\t\t\tstate = 1;\n\t\t\t\t} else {\n\t\t\t\t\tpath = 'index';\n\t\t\t\t\tstate = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn resolve(scope, tree, path, fullPath, state, id);\n\t};\n\tgetRequire = function (scope, tree, id) {\n\t\treturn function (path) {\n\t\t\treturn wmRequire(scope, [].concat(tree), path, id);\n\t\t};\n\t};\n\treturn getRequire(modules, [], '');\n})({\n\t\"aktivniobcanstvi\": {\n\t\t\"src\": {\n\t\t\t\"scripts\": {\n\t\t\t\t\"index.js\": function (exports, module, require) {\n\t\t\t\t\teval(\"\\n//# sourceURL=aktivniobcanstvi/src/scripts/index.js\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})(\"aktivniobcanstvi/src/scripts/index\");\n"],"file":"scripts/index.js","sourceRoot":"/source/"}